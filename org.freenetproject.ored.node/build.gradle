plugins {
    id 'org.beryx.jlink' version '2.25.0'
    id 'ored.java-conventions'
    id "com.google.osdetector" version "1.7.0"
}

dependencies {
    implementation project(':org.freenetproject.ored.support')
    implementation project(':org.freenetproject.ored.crypt')
    implementation project(':org.freenetproject.ored.l10n')
    implementation project(':org.freenetproject.ored.client')
    implementation project(':org.freenetproject.ored.config')
    implementation project(':org.freenetproject.ored.store')
    implementation project(path: ':org.freenetproject.ext', configuration: 'shadow')

    implementation 'net.java.dev.jna:jna-jpms:5.11.0'
    implementation 'net.java.dev.jna:jna-platform-jpms:5.11.0'
    implementation('net.harawata:appdirs:1.2.1') {
        exclude group: 'net.java.dev.jna', module: 'jna-platform'
    }

    testImplementation testFixtures(project(":org.freenetproject.ored.support"))
}

application {
    mainModule = 'org.freenetproject.ored.node' // name defined in module-info.java
    mainClass = 'freenet.node.NodeStarter'
}

jlink {
    options = [
            '--ignore-signing-information',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
//            '--strip-debug'
    ]

    mainClass = "freenet.node.NodeStarter"

    jarExclude 'freenet-ext', '/freenet/support/**'

    imageDir = file("$rootDir/build/jlink")
    imageZip = file("$rootDir/build/jlink.zip")

    jpackage {
        imageOutputDir = file("$rootDir/build/jpackage")
        installerOutputDir = file("$rootDir/build/jpackage")
        imageName = 'Oldenet'
        installerName = 'Oldenet'
        appVersion = '7.5.1493'
    }
}

tasks.register('copyWrapper') {
    def wrapperCmdPath = "${tasks.jlink.imageDir}/bin";
    def wrapperConfPath = "${tasks.jlink.imageDir}/conf";
    def wrapperLibPath = "${tasks.jlink.imageDir}/lib/wrapper";

    dependsOn 'jlink'
    inputs.files tasks.jlink.imageDirAsFile, "${rootDir}/lib/wrapper"
    outputs.dirs wrapperCmdPath, wrapperConfPath, wrapperLibPath

    doLast {
        // Copy wrapper command executable
        copy {
            switch (osdetector.os) {
                case 'windows':
                    switch (osdetector.arch) {
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-windows-x86-32.exe"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-windows-x86-64.exe"
                            break
                    }
                    break;
                case 'osx':
                    if (osdetector.arch == 'aarch_64') {
                        from "${rootDir}/lib/wrapper/bin/wrapper-macosx-arm-64"
                    } else {
                        from "${rootDir}/lib/wrapper/bin/wrapper-macosx-universal-64"
                    }
                    break;
                case 'linux':
                    switch (osdetector.arch) {
                        case 'arm_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-linux-armel-32"
                            break
                        case 'aarch_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-linux-arm-64"
                            break
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-linux-x86-32"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-linux-x86-64"
                            break
                    }
                    break;
                case 'freebsd':
                    switch (osdetector.arch) {
                        case 'aarch_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-arm-64"
                            break
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-x86-32"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-x86-64"
                            break
                    }
                    break;
            }
            into wrapperCmdPath
            rename 'wrapper-[^\\.]+(.exe)?', 'wrapper\$1'
        }

        // Copy lib
        copy {
            switch (osdetector.os) {
                case 'windows':
                    switch (osdetector.arch) {
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/lib/wrapper-windows-x86-32.dll"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/lib/wrapper-windows-x86-64.dll"
                            break
                    }
                    break;
                case 'osx':
                    if (osdetector.arch == 'aarch_64') {
                        from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                    } else {
                        from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-universal-64.jnilib"
                    }
                    break;
                case 'linux':
                    switch (osdetector.arch) {
                        case 'arm_32':
                            from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                            break
                        case 'aarch_64':
                            from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                            break
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                            break
                    }
                    break
                case 'freebsd':
                    switch (osdetector.arch) {
                        case 'aarch_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-arm-64"
                            break
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-x86-32"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-x86-64"
                            break
                    }
                    break
            }
            into wrapperLibPath
        }

        // Copy wrapper.conf
        copy {
            from "${rootDir}/packagefiles/common/wrapper.conf"
            into wrapperConfPath
        }

        // Copy launch script
        copy {
            if (osdetector.os == 'windows') {
                from "${rootDir}/packagefiles/common/ored.bat"
            } else {
                from "${rootDir}/packagefiles/common/ored.sh"
            }
            into wrapperCmdPath
        }

        if (osdetector.os != 'windows') {
            project.exec {
                commandLine('chmod', '+x', "${wrapperCmdPath}/wrapper")
                commandLine('chmod', '+x', "${wrapperCmdPath}/ored.sh")
            }
        }

        delete "${tasks.jlink.imageDir}/bin/org.freenetproject.ored.node", "${tasks.jlink.imageDir}/bin/org.freenetproject.ored.node.bat"
    }
}

tasks.named('clean').configure {
    delete += jlink.imageDir
    delete += jlink.imageZip
    delete += jlink.jpackageData.get().imageOutputDir
    delete += jlink.jpackageData.get().installerOutputDir
}