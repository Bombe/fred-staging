plugins {
    id 'org.beryx.jlink' version '2.25.0'
    id 'ored.java-conventions'
    id "com.google.osdetector" version "1.7.0"
}

dependencies {
    implementation project(':org.freenetproject.ored.support')
    implementation project(':org.freenetproject.ored.crypt')
    implementation project(':org.freenetproject.ored.l10n')
    implementation project(':org.freenetproject.ored.client')
    implementation project(':org.freenetproject.ored.config')
    implementation project(':org.freenetproject.ored.store')
    implementation project(':org.freenetproject.ored.cli')
    implementation project(path: ':org.freenetproject.ext', configuration: 'shadow')

    implementation 'net.java.dev.jna:jna-jpms:5.11.0'
    implementation 'net.java.dev.jna:jna-platform-jpms:5.11.0'
    implementation('net.harawata:appdirs:1.2.1') {
        exclude group: 'net.java.dev.jna', module: 'jna-platform'
    }

    testImplementation testFixtures(project(":org.freenetproject.ored.support"))
}

application {
    mainModule = 'org.freenetproject.ored.node' // name defined in module-info.java
    mainClass = 'freenet.node.NodeStarter'
}


// TODO: Move jlink to cli package

jlink {
    options = [
            '--ignore-signing-information',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
            '--add-modules', 'org.freenetproject.ored.node',
//            '--strip-debug'
    ]

    moduleName = "org.freenetproject.ored.cli"
    mainClass = "freenet.cli.Cli"

    imageDir = file("$rootDir/build/jlink")
    imageZip = file("$rootDir/build/jlink.zip")

    launcher {
        name = "oredcli"
        windowsScriptTemplate = file("$rootDir/packagefiles/common/windowsScriptTemplate.txt")
    }
}

tasks.register('copyWrapper') {
    dependsOn 'jlink'

    def wrapperCmdPath = "${tasks.jlink.imageDir}/bin";
    def wrapperConfPath = "${tasks.jlink.imageDir}/conf";
    def wrapperLibPath = "${tasks.jlink.imageDir}/lib/wrapper";

    inputs.files tasks.jlink.imageDirAsFile, "${rootDir}/lib/wrapper", "${rootDir}/packagefiles/common"
    outputs.dirs wrapperCmdPath, wrapperConfPath, wrapperLibPath

    doLast {
        // Copy wrapper command executable
        copy {
            switch (osdetector.os) {
                case 'windows':
                    switch (osdetector.arch) {
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-windows-x86-32.exe"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-windows-x86-64.exe"
                            break
                    }
                    break;
                case 'osx':
                    if (osdetector.arch == 'aarch_64') {
                        from "${rootDir}/lib/wrapper/bin/wrapper-macosx-arm-64"
                    } else {
                        from "${rootDir}/lib/wrapper/bin/wrapper-macosx-universal-64"
                    }
                    break;
                case 'linux':
                    switch (osdetector.arch) {
                        case 'arm_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-linux-armel-32"
                            break
                        case 'aarch_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-linux-arm-64"
                            break
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-linux-x86-32"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-linux-x86-64"
                            break
                    }
                    break;
                case 'freebsd':
                    switch (osdetector.arch) {
                        case 'aarch_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-arm-64"
                            break
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-x86-32"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-x86-64"
                            break
                    }
                    break;
            }
            into wrapperCmdPath
            rename 'wrapper-[^\\.]+(.exe)?', 'wrapper\$1'
        }

        // Copy lib
        copy {
            switch (osdetector.os) {
                case 'windows':
                    switch (osdetector.arch) {
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/lib/wrapper-windows-x86-32.dll"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/lib/wrapper-windows-x86-64.dll"
                            break
                    }
                    break;
                case 'osx':
                    if (osdetector.arch == 'aarch_64') {
                        from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                    } else {
                        from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-universal-64.jnilib"
                    }
                    break;
                case 'linux':
                    switch (osdetector.arch) {
                        case 'arm_32':
                            from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                            break
                        case 'aarch_64':
                            from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                            break
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/lib/libwrapper-macosx-arm-64.dylib"
                            break
                    }
                    break
                case 'freebsd':
                    switch (osdetector.arch) {
                        case 'aarch_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-arm-64"
                            break
                        case 'x86_32':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-x86-32"
                            break
                        case 'x86_64':
                            from "${rootDir}/lib/wrapper/bin/wrapper-freebsd-x86-64"
                            break
                    }
                    break
            }
            into wrapperLibPath
        }

        // Copy wrapper.conf
        copy {
            from "${rootDir}/packagefiles/common/"
            include 'wrapper.conf'
            into wrapperConfPath
        }

        // Copy launch script
        copy {
            if (osdetector.os == 'windows') {
                from "${rootDir}/packagefiles/common/ored.bat"
                from "${rootDir}/packagefiles/common/oldenet.ico"
                switch (osdetector.arch) {
                    case 'x86_32':
                        from "${rootDir}/packagefiles/common/elevate/bin/x86/Release/Elevate.exe"
                        break
                    case 'x86_64':
                        from "${rootDir}/packagefiles/common/elevate/bin/x64/Release/Elevate.exe"
                        break
                }
            } else {
                from "${rootDir}/packagefiles/common/ored.sh"
            }
            into wrapperCmdPath
        }

        if (osdetector.os != 'windows') {
            project.exec {
                commandLine('chmod', '+x', "${wrapperCmdPath}/wrapper")
                commandLine('chmod', '+x', "${wrapperCmdPath}/ored.sh")
            }
        }

        delete "${tasks.jlink.imageDir}/bin/org.freenetproject.ored.node", "${tasks.jlink.imageDir}/bin/org.freenetproject.ored.node.bat"
    }
}


tasks.register('package') {
//    dependsOn 'copyWrapper'
    dependsOn 'wixClean'

    doLast {
        if (osdetector.os == 'windows') {
            if (osdetector.arch == 'x86_32') {
                throw new GradleScriptException("Currently win32 package is not supported")
            }

            def wixSrcDir = "${rootDir}/packagefiles/windows/wix"
            def wixBuildDir = "${rootDir}/build/wix"

            String wixHome
            if (project.hasProperty('wix.home')) {
                wixHome = project.property('wix.home')
            } else {
                wixHome = System.getenv('WIX')
            }

            if (wixHome == null || wixHome.isEmpty()) {
                throw new GradleScriptException("Unable to locate WiX toolset. Please specify WIX envirement variable or set wix.home property.")
            }

            // assert file("${wixHome}/bin/heat.exe").exists()
            assert file("${wixHome}/bin/candle.exe").exists()
            assert file("${wixHome}/bin/light.exe").exists()

            // Generate JlinkFiles.wxs from jlink dir
            // heat.exe dir "Z:\ored\build\jlink" -dr APPLICATIONFOLDER -cg NewFilesGroup -gg -g1 -sf -srd -var "var.JlinkDir" -out "Z:\Downloads\JlinkFiles.wxs"
//            exec {
//                workingDir "${rootDir}"
//                executable "${wixHome}/bin/heat.exe"
//                args 'dir', "${rootDir}/build/jlink", '-dr', 'APPLICATIONFOLDER', '-cg', 'NewFilesGroup', '-gg', '-g1', '-sf', '-srd', '-var', 'var.JlinkDir', '-out', "${rootDir}/packagefiles/windows/wix/JlinkFiles.wxs"
//            }

            // Compile
            exec {
                workingDir "${rootDir}"
                executable "${wixHome}/bin/candle.exe"
                args(
                        '-arch', 'x64',
                        '-ext', 'WixUIExtension',
                        '-ext', 'WixUtilExtension',
                        "-dJlinkDir=${tasks.jlink.imageDir}",
                        "-dProjectDir=${rootDir}/packagefiles/windows/wix",
                        '-out', "${wixBuildDir}/",
                        "${wixSrcDir}/*.wxs"
                )
            }

            // Copy necessary files before linking
            copy {
                from wixSrcDir
                include 'gpl-3.0.rtf'
                include '*.wxl'
                into "${wixBuildDir}"
            }

            // Link
            exec {
                workingDir "${rootDir}"
                executable "${wixHome}/bin/light.exe"
                args(
                        '-out', "${wixBuildDir}/OldenetInstaller.msi",
                        '-sice:ICE20', // https://stackoverflow.com/questions/31211028/error-lght0204-ice57-component-xxx-has-both-per-user-data-and-a-keypath-tha
                        '-sice:ICE30',
                        '-sice:ICE57',
                        '-sice:ICE105',
                        '-ext', 'WixUIExtension',
                        '-ext', 'WixUtilExtension',
                        '-cultures:en-us',
                        '-loc', "${wixBuildDir}/en-us.wxl",
                        "${wixBuildDir}/*.wixobj"
                )
            }
        }
    }

}

tasks.register('wixClean', Delete) {
    delete file("${rootDir}/build/wix/")
}

tasks.named('clean').configure {
    dependsOn 'wixClean'

    delete += jlink.imageDir
    delete += jlink.imageZip
    delete += jlink.jpackageData.get().imageOutputDir
    delete += jlink.jpackageData.get().installerOutputDir
}
